cohencu.c
       //assert(z == 6*n + 6);
       //assert(y == 3*n*n + 3*n + 1);
       //assert(x == n*n*n);
       //assert(n <= a+1);

cohendiv.c
      //assert(x==q*y+r);
      //assert(r>=0);
      //assert((x>=1) && (y>=1));

	       //assert(r>=y*a && b==y*a && x==q*y+r && r>=0 && x>=1 && y>=1);

     //assert(r == x % y);
     //assert(q == x / y);
     //assert(x == q*y+r);

dijkstra.c
    //assert(p == 0 && r == n && h == 0 && n >= 0);

    //assert(r < 2*p + q);
    //assert(p*p + r*q == n*q);
    //assert(r >= 0);

divbin.c
	  //assert(q==0 && A==r && b>0 && r>0);
	  //assert(A == q*b + r && r >= 0 && r < b);


egcd2.c
	  //assert(a == y*r+x*p);
	  //assert(b == x*q+y*s);
	  //assert(GCD(a,b) == GCD(x,y));

	       //assert(a == k*b+c);
		     //assert(GCD(a,b) == GCD(x,y));


egcd3.c
	  //assert(a==y*r+x*p); 
	  //assert(b==x*q+y*s);
	  //assert(GCD(a,b) == GCD(x,y));

		   // assert(GCD(a,b) == GCD(x,y));
		   // assert(a == k*b+c); 

		    // assert(GCD(a,b) == GCD(x,y));
		    // assert(v == b*d); 

egcd.c
	  //assert(1 == p*s - r*q);
	  //assert(a == y*r + x*p);
	  //assert(b == x*q + y*s);


fermat1.c
	  //assert(4*(A+r) == u*u-v*v-2*u+2*v);
      //assert(u % 2 == 1 && v % 2 == 1);
      //assert(A >= 1);

           //assert(4*(A+r) == u*u-v*v-2*u+2*v);
           //assert(u % 2 == 1 && v % 2 == 1);
           //assert(A >= 3);


           //assert(4*(A+r) == u*u-v*v-2*u+2*v);
           //assert(u % 2 == 1 && v % 2 == 1);
           //assert(A >= 3);

     //assert(u!=v); 


fermat2.c
      //assert(4*(A+r) == u*u-v*v-2*u+2*v);
      //assert(u % 2 == 1 && v % 2 == 1);
      //assert(A >= 1);

     //assert(u!=v);      


freire1.c
	  //assert((double)a == 2*x + r*r - r); 
      //assert(x>=0);

     //assert(r==(int)round(sqrt(a)));


freire2.c
      //assert(((int)(4*r*r*r - 6*r*r + 3*r) + (int)(4*x - 4*a)) == 1); 
      //assert((int)(4*s) -12*r*r == 1); 
      //assert(x > 0);


geo1.c
	  //assert(x*z - x - y + 1 == 0);


geo2.c
	  //assert(1+x*z-x-z*y==0);



geo3.c
	  //assert(z*x-x+a-a*z*y == 0);


hard.c
      //assert(A >= 0 && B > 0 && q == 0 && r == A && d == B*p);
      //assert(A == q * B + r && d == B * p && A >= 0 && B >= 1 && r >= 0 && r < d);


knuth.c
	  //assert(d*d*q - 2*q*d - 4*r*d + 4*k*d  + 8*r == 8*n);
	  //assert(k*t == t*t);
	  //assert(d*d*q - 2*d*q - 4*d*r + 4*d*t + 4*a*k - 4*a*t - 8*n + 8*r == 0);
	  //assert(d*k - d*t - a*k + a*t == 0);   


knuth_simp.c


lcm1.c
	  //assert(x*u + y*v == a*b);
	  //assert(GCD(x,y) == GCD(a,b));

    //assert(x*u + y*v == a*b);
	  //assert(GCD(x,y) == GCD(a,b));

		//assert(x*u + y*v == a*b);
	  //assert(GCD(x,y) == GCD(a,b));


lcm2.c
      //assert(GCD(x,y) == GCD(a,b));
	  //assert(x*u + y*v == 2*a*b);
      //assert((x >= 1) && (y >= 1));



mannadiv.c
	  //assert(q*B + r + t == A);
	  //assert(r < B && r >= 0);
     //assert(q == A / B);



prod4br.c
	  //assert(q+a*b*p==x*y);
     //assert(q == x*y);




prodbin.c
	  //assert(z+x*y==a*b);


ps2.c
      //assert(2 * x - y * y - y == 0);
      //assert(c <= k);

ps3.c
	  //assert(6*x-2*y*y*y-3*y*y-y == 0);
      //assert(c <= k);


ps4.c
	  //assert(4*x-(y*y*y*y)-2*(y*y*y)-(y*y) == 0);
      //assert(c <= k);


ps5.c
ps6.c
sqrt1.c
	  //assert(t == 2*a + 1);
	  //assert(s == (a + 1)*(a + 1));
    //assert(a*a <= n);    
